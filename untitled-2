while heap:
        _, current_state, cost = heapq.heappop(heap)   
        if current_state == goal_state:
            return cost       
        visited.add(tuple(map(tuple, current_state)))        
        zero_row, zero_col = next((i, j) for i in range(3) for j in range(3) if current_state[i][j] == 0)
        moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]       
        for move in moves:
            new_row, new_col = zero_row + move[0], zero_col + move[1]
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_state = [row[:] for row in current_state]
                new_state[zero_row][zero_col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[zero_row][zero_col]                
                if tuple(map(tuple, new_state)) not in visited:
                    heapq.heappush(heap, (cost + 1 + manhattan_distance(new_state), new_state, cost + 1))
    return float('inf')
